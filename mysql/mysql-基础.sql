--- MySQL 基础回顾

--数据库设计3范式
 --1NF:原子性 字段不可再分,否则就不是关系数据库; 
 --2NF:唯一性 一个表只说明一个事物; 
 --3NF:每列都与主键有直接关系，不存在传递依赖; 


--逆规范化
    --反规范化的好处是降低链接操作的需求， 降低外码和索引的数目。 还可能较少表的数量
    --相反 带来的可能出现 数据的完整性问题，加快查询速度，但会降低修改速度，要结合实际做决定，一般好的索引和其他方法可以解决这个问题

    --常用的有， 增加冗余列，增加派生列，重新组表和分割表
        1 增加冗余列 ：指的是在多个表中具有相同的列，他常用来查询时避免连接操作
        2 增加派生列 ：指的是新增加的派生列来源其他表中的数据， 由其他表的数据经过计算生成，增加派生列的作用是查询的时候减少链接操作，避免使用集函数
        3 重新组表  ： 如果用户需要查看2个表的链接出来的结果集合，那么可以考虑组成个新表
        4 分割表    ： 垂直分割 和 水平分割

    --如果用反规范化， 一定要注意维护数据的完整性， 通常的手段有 批处理，应用逻辑处理，触发器
    --批处理： 对实时性要求不高的数据    
    --应用逻辑: 这个如果需要修改，很麻烦
    --触发器： 这个不错，推荐


--使用中间表来提高统计查询速度
--对于数据量很大的表上做统计 是效率很低的，还有可能影响到线上用户的体现，这时候采用中间表 是个不错的选择
    --操作
        --创建一个和线上表一样的表， 结构也一样，create table xxxx like table  --百度一下 有这个语句
        --insert into table select * from table1 where 需要统计的条件;
        --然后进行统计 和查询，
    
    --优点
        --中间表复制源表部分数据，并且于源文件相互‘隔离’，在中间表做统计不会影响在线用户体验
        --中间表 可以额外的添加索引，和临时字段，从而提高统计查询效率和辅助统计查询作用

    


        


